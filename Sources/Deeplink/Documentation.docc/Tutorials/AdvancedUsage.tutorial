@Tutorial(time: 10) {
    @Intro(title: "Advanced Usage") {
        This tutorial is a small collection of advanced tips and tricks.
    }
        
    @Section(title: "Altering the matching behavior") {
        In normal usage of this library, you `return true` from the `ifMatching` closure on the ``DeeplinksCenter`` `register` methods.
        
        What if we returned false? Why would you do that?
        
        In this section, we'll implement a simple AB testing behavior for interpreting deeplinks.
        
        @Steps {
            @Step {
                Let's start from a simple setup: we have only our product deeplink. 
                
                What we want is to show one screen to 50% of the users and a different version of that screen to the rest. Let's say that we have some kind of `isMagicOn()` function that returns `true` if we should show the alternative view.
                
                @Code(name: "Altering matching.swift", file: "AdvancedUsage 1.swift")
            }
            
            @Step {
                We can embed the check directly inside the `ifMatching` function...
                
                @Code(name: "Altering matching.swift", file: "AdvancedUsage 2.swift")
            }
            
            @Step {
                Or we can register the same deeplink template twice.
                
                In the first registration we check `isMagicOn` and we only continue if it is `true`. This means that if the other registration will only ever be executed if `isMagicOn` is `false`, since ``DeeplinksCenter`` will stop evaluating templates at the first successful match. This also makes it really easy to remove the Magic part if... needed.
                
                @Code(name: "Altering matching.swift", file: "AdvancedUsage 3.swift")
            }
            
            @Step {
                Since you also get the original URL that is being evaluated, you can also perform additional URL checking logic in the `ifMatching` closure, returning `false` if the checks fail.
                
                @Code(name: "Altering matching.swift", file: "AdvancedUsage 4.swift")
            }
        }
    }
    
    @Section(title: "Using DefaultInitializable") {
        "Why do I have to pass an instance of my value to the register function?"
        
        The problem is that the library needs an initialized object to assign values to. That's it: or you give an initialized object, or you define a struct that conforms to the utility protocol `DefaultInitializable`, which only requirement is a empty `init()`.
        
        @Steps {
            @Step {
                Let's start from our product deeplink. 
                
                Normally, we pass an instance of Product to the register function.
                
                @Code(name: "DefaultInitializable demo.swift", file: "AdvancedUsage 5.swift")
            }
            
            @Step {
                We can make Product conform to `DefaultInitializable` so that we don't have to pass an instance at registration time, but a new instance will be generated every time you need to parse a URL.
                
                @Code(name: "DefaultInitializable demo.swift", file: "AdvancedUsage 6.swift")
            }
        }
    }
}
