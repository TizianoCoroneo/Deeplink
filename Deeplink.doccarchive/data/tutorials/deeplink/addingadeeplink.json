{"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[{"kind":"hero","title":"Adding Deeplinks","chapter":"Using the library","estimatedTimeInMinutes":10,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial will explain how to add deeplinks to your app and how to handle overlapping deeplink templates."}]}]},{"kind":"tasks","tasks":[{"anchor":"Adding-one-deeplink","title":"Adding one deeplink","contentSection":[{"kind":"fullWidth","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We‚Äôll start by adding a single deeplink: a link to view a product page."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The link we want to support looks like this: "},{"type":"codeVoice","code":"https:\/\/example.com\/product\/123"},{"type":"text","text":"."}]}]}],"stepsSection":[{"code":"AddingADeeplink 1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the data you want to extract from the deeplink URL."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In our case, we want to get the "},{"type":"codeVoice","code":"productId"},{"type":"text","text":", so that we can fetch the informations for that product from the server and display the product page. Declare your properties as optionals. The reason will become clear later üòá"}]}],"type":"step","runtimePreview":null,"media":null},{"code":"AddingADeeplink 2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a template that describes how to parse the deeplink."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using Swift‚Äôs "},{"type":"codeVoice","code":"String"},{"type":"text","text":" interpolation and "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":"s we can define a ‚ÄúDeeplink Template‚Äù that tells the system how to parse data from a URL."},{"type":"text","text":" "},{"type":"text","text":"The data present in the URL at the location where the keypath is inserted will be assigned to the property indicated by the keypath."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"AddingADeeplink 3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Register the template with the notification center."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to provide 3 things: the deeplink template that you want to eventually parse URLs with, an object where to assign values extracted from the deeplink URL, and a closure to execute if the template finds a successful match."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"AddingADeeplink 4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parse a "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" using the "},{"type":"codeVoice","code":"DeeplinkCenter"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use the DeeplinkCenter to parse URLs. The center will try all the registered templates in order, running the closure you provide in the registration if the corresponding template matches. Once one closure is run successfully, execution ends."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Adding-more-deeplinks","title":"Adding more deeplinks","contentSection":[{"kind":"fullWidth","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let‚Äôs add more deeplinks: we‚Äôll add one for opening the Account page and one to open the product detail page."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The links we want to support are in this format: "},{"type":"codeVoice","code":"https:\/\/example.com\/account"},{"type":"text","text":" and "},{"type":"codeVoice","code":"https:\/\/example.com\/product\/123abc\/detail"}]}]}],"stepsSection":[{"code":"AddingMultipleDeeplinks 1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let‚Äôs define the data that we want to extract."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This time, the account deeplink template has no data to extract: in this case, you can define a "},{"type":"codeVoice","code":"Deeplink<Void>"},{"type":"text","text":" and you don‚Äôt need to use keypaths or string interpolation. About the product detail, we case reuse the Product struct since we need to extract the same argument."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"AddingMultipleDeeplinks 2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we should register the deeplinks to the center. Let‚Äôs do in the same order in which we declared the deeplinks."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This implementation has a problem: the registered deeplinks are evaluated in order one at the time until a match is found. Our problem is that the "},{"type":"codeVoice","code":"\/product\/123\/detail"},{"type":"text","text":" route will never be triggered because the template "},{"type":"codeVoice","code":"\/product\/\\(\\.productId)"},{"type":"text","text":" already always matches that route."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"AddingMultipleDeeplinks 3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The solution is to change the order of the registered templates: the more ‚Äúspecific‚Äù a template is, the closer it should be to the center."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This way, the more specific ‚ÄúProduct Detail‚Äù deeplink template is checked before the more generic ‚ÄúProduct‚Äù deeplink."},{"type":"text","text":" "},{"type":"text","text":"You can use this behavior to do interesting things: for example, a very generic template could behave as ‚Äúcatch-all‚Äù behavior for unrecognized deeplink URLs."}]}],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Advanced Usage","abstract":[{"type":"text","text":"This tutorial is a small collection of advanced tips and tricks."}]}],"identifier":{"url":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Adding Deeplinks","categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":"Documentation"},"hierarchy":{"modules":[{"reference":"doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents\/Using-the-library","projects":[{"reference":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink","sections":[{"kind":"task","reference":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink#Adding-one-deeplink"},{"kind":"task","reference":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink#Adding-more-deeplinks"}]},{"reference":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage","sections":[{"kind":"task","reference":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage#Altering-the-matching-behavior"},{"kind":"task","reference":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage#Using-DefaultInitializable"}]}]}],"reference":"doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents\/Using-the-library"]]},"documentVersion":0,"references":{"AddingMultipleDeeplinks 3.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","import Deeplink","import SwiftUI","","struct Product {","    var productId: String?","}","","let productDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\"","","let accountDeeplink: Deeplink<Void> = \"\/account\"","","let productDetailDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\/detail\"","","let center = DeeplinksCenter()","","center","    .register(","        deeplink: productDetailDeeplink,","        assigningTo: Product(),","        ifMatching: { url, value in","","        print(value.productId)","","        return true","    })","","    .register(","        deeplink: accountDeeplink,","        ifMatching: { url in","","        return true","    })","","    .register(","        deeplink: productDeeplink,","        assigningTo: Product(),","        ifMatching: { url, value in","","        print(value.productId)","","        return true","    })"],"fileName":"Defining Deeplink Data.swift","identifier":"AddingMultipleDeeplinks 3.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":21},{"line":38}]},"doc://Deeplink/tutorials/Deeplink/AddingADeeplink#Adding-one-deeplink":{"role":"pseudoSymbol","title":"Adding one deeplink","abstract":[{"type":"text","text":"This tutorial will explain how to add deeplinks to your app and how to handle overlapping deeplink templates."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink#Adding-one-deeplink","kind":"section","type":"section","url":"\/tutorials\/deeplink\/addingadeeplink#Adding-one-deeplink"},"doc://Deeplink/tutorials/Deeplink/AddingADeeplink":{"role":"project","title":"Adding Deeplinks","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial will explain how to add deeplinks to your app and how to handle overlapping deeplink templates."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink","kind":"project","type":"topic","url":"\/tutorials\/deeplink\/addingadeeplink"},"AddingMultipleDeeplinks 1.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","import Deeplink","","struct Product {","    var productId: String?","}","","let productDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\"","","let accountDeeplink: Deeplink<Void> = \"\/account\"","","let productDetailDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\/detail\""],"fileName":"Defining Deeplink Data.swift","identifier":"AddingMultipleDeeplinks 1.swift","type":"file","fileType":"swift","highlights":[]},"AddingMultipleDeeplinks 2.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","import Deeplink","","struct Product {","    var productId: String?","}","","let productDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\"","","let accountDeeplink: Deeplink<Void> = \"\/account\"","","let productDetailDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\/detail\"","","let center = DeeplinksCenter()","","center","    .register(","        deeplink: productDeeplink,","        assigningTo: Product(),","        ifMatching: { url, value in","","        print(value.productId)","","        return true","    })","","    .register(","        deeplink: accountDeeplink,","        ifMatching: { url in","","        return true","    })","","    .register(","        deeplink: productDetailDeeplink,","        assigningTo: Product(),","        ifMatching: { url, value in","","        print(value.productId)","","        return true","    })"],"fileName":"Defining Deeplink Data.swift","identifier":"AddingMultipleDeeplinks 2.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}]},"AddingADeeplink 4.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","import Deeplink","","struct Product {","    var productId: String?","}","","\/\/ The type variable indicates which type do you want to use the keypaths of: using the `Product` type allows us to use the `\\.productId` keypath.","let productDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\"","","let center = DeeplinksCenter()","","center.register(","    deeplink: productDeeplink,","    assigningTo: Product(), \/\/ When the template matches the input URL, the values extracted will be assigned to the object passed in this property.","    ifMatching: { url, value in","","    \/\/ We can do what we need here with a ready `Product` value, parsed from the received deeplink URL if it is parsed successfully.","    print(\"ProductId: \\(value.productId)\")","","    \/\/ We return `true` to indicate that we handled the deeplink successfully.","    return true","})","","","\/\/ Now the center is ready to parse URLs!","","let url = URL(string: \"https:\/\/example.com\/product\/123abc\")!","try! center.parse(url: url)","","\/\/ This will run the closure that we registered for the `productDeeplink` template since the format matches, and it will print `ProductId: 123abc`."],"fileName":"Defining Deeplink Data.swift","identifier":"AddingADeeplink 4.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}]},"AddingADeeplink 2.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","import Deeplink","","struct Product {","    var productId: String?","}","","\/\/ The type variable indicates which type do you want to use the keypaths of: using the `Product` type allows us to use the `\\.productId` keypath.","let productDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\""],"fileName":"Defining Deeplink Data.swift","identifier":"AddingADeeplink 2.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":9},{"line":10},{"line":11}]},"doc://Deeplink/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"All about Deeplinks","abstract":[{"type":"text","text":"These tutorials will explain how to add deeplinks to your app, and how to manage more complex situations like overlapping deeplink templates or choosing at runtime whether to match a URL or not."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"},"doc://Deeplink/tutorials/Deeplink/AdvancedUsage#Altering-the-matching-behavior":{"role":"pseudoSymbol","title":"Altering the matching behavior","abstract":[{"type":"text","text":"This tutorial is a small collection of advanced tips and tricks."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage#Altering-the-matching-behavior","kind":"section","type":"section","url":"\/tutorials\/deeplink\/advancedusage#Altering-the-matching-behavior"},"doc://Deeplink/tutorials/Deeplink/AdvancedUsage":{"role":"project","title":"Advanced Usage","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial is a small collection of advanced tips and tricks."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage","kind":"project","type":"topic","url":"\/tutorials\/deeplink\/advancedusage"},"doc://Deeplink/tutorials/Deeplink/AddingADeeplink#Adding-more-deeplinks":{"role":"pseudoSymbol","title":"Adding more deeplinks","abstract":[{"type":"text","text":"This tutorial will explain how to add deeplinks to your app and how to handle overlapping deeplink templates."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AddingADeeplink#Adding-more-deeplinks","kind":"section","type":"section","url":"\/tutorials\/deeplink\/addingadeeplink#Adding-more-deeplinks"},"doc://Deeplink/tutorials/Tutorial-Table-of-Contents/Using-the-library":{"role":"article","title":"Using the library","abstract":[],"identifier":"doc:\/\/Deeplink\/tutorials\/Tutorial-Table-of-Contents\/Using-the-library","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/using-the-library"},"AddingADeeplink 3.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","import Deeplink","","struct Product {","    var productId: String?","}","","\/\/ The type variable indicates which type do you want to use the keypaths of: using the `Product` type allows us to use the `\\.productId` keypath.","let productDeeplink: Deeplink<Product> = try! \"\/product\/\\(\\.productId)\"","","let center = DeeplinksCenter()","","center.register(","    deeplink: productDeeplink,","    assigningTo: Product(), \/\/ When the template matches the input URL, the values extracted will be assigned to the object passed in this property.","    ifMatching: { url, value in","","    \/\/ We can do what we need here with a ready `Product` value, parsed from the received deeplink URL if it is parsed successfully.","    print(\"ProductId: \\(value.productId)\")","","    \/\/ We return `true` to indicate that we handled the deeplink successfully.","    return true","})"],"fileName":"Defining Deeplink Data.swift","identifier":"AddingADeeplink 3.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"AddingADeeplink 1.swift":{"syntax":"swift","content":["","\/\/ Example link: `https:\/\/example.com\/product\/123`","","struct Product {","    var productId: String?","}"],"fileName":"Defining Deeplink Data.swift","identifier":"AddingADeeplink 1.swift","type":"file","fileType":"swift","highlights":[]},"doc://Deeplink/tutorials/Deeplink/AdvancedUsage#Using-DefaultInitializable":{"role":"pseudoSymbol","title":"Using DefaultInitializable","abstract":[{"type":"text","text":"This tutorial is a small collection of advanced tips and tricks."}],"identifier":"doc:\/\/Deeplink\/tutorials\/Deeplink\/AdvancedUsage#Using-DefaultInitializable","kind":"section","type":"section","url":"\/tutorials\/deeplink\/advancedusage#Using-DefaultInitializable"}}}